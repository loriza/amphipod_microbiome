library(coin)
file1 = "KO.txt"
mapping = "Rehabilitation1.csv"
outfile = "test2"
cname = 1
outfile = paste(outfile,"test_out",sep=".")
data = read.table(file1,row.names=1,check.names=F,header=T,comment.char="",sep="\t")#id as column names
phen = read.table(mapping,row.names=1,header=T,check.names=F,sep="\t")

chosen_list = cname
profile <- t(data)
mapping <- phen

names(mapping)[chosen_list] <- 'target'  

calc_wilcoxon <- function(prof,g,g1,g2,k){
 
    dat <- merge(prof,g,by=0)
    rownames(dat) <- dat$Row.names
    dim(dat)
    dat <- dat[,-1]
    dat <- dat[,1:ncol(prof)]
    dat <- dat[,colSums(dat)>0]
    num <- ncol(dat) #feature counts
 
    res <- matrix(0,nrow=num,ncol=13)
    
    g$ids <- rownames(g)
    dat <- as.data.frame(t(dat))#as such feature as rows and id as columns
    #print(dim(dat))
    rownames(res) <- rownames(dat)
    g$target <- factor(g$target)
 
    g <- g[,(colnames(g)%in%c("ids","target"))]
    g<- g[order(g$ids),]
    dat <- dat[,order(colnames(dat))]

    library(coin)
    for (j in 1:num){ 
        s = as.numeric(dat[j,])    
        mydata = data.frame(g,s)      
        r = rank(s,ties.method = "average")
        #print(mydata)
        #print(s[g==g1])
        res[j,1] = mean(s[g==g1])
        res[j,2] = mean(s[g==g2])
        res[j,3] = mean(r[g==g1])
        res[j,4] = mean(r[g==g2])
        test1 = t.test(s~target,data=mydata)
        res[j,5] = test1$p.value
        wilcox1 = wilcox.test(s~target,data=mydata)
        res[j,9] = wilcox1$p.value
        perm = oneway_test(s~target,data=mydata,distribution=approximate(nresample = 9999))
        res[j,13] = pvalue(perm)
    }
    
    pa1 = p.adjust(res[,5],method="fdr")
    res[,6] = pa1
    library("fdrtool")
    fdr1 = fdrtool(res[,5],statistic="pvalue")
    res[,7] = fdr1$qval
    res[,8] = fdr1$lfdr
    pa2 = p.adjust(res[,9],method="fdr")
    res[,10] = pa2
    fdr2 = fdrtool(res[,9],statistic="pvalue")
    res[,11] = fdr2$qval
    res[,12] = fdr2$lfdr
    colnames = c("ID",paste(g1,"mean",sep="_"),paste(g2,"mean",sep="_"),paste(g1,"Rank_mean",sep="_"),
                paste(g2,"Rank_mean",sep="_"),"t_pvalue","t_adjust","t_qvalue","t_fdr",
                "wilcox_pvalue","wilcox_adjust","wilcox_qvalue","wilcox_fdr","perm_value")
    write.table(t(colnames),paste0(outfile,k),sep="\t",quote=F,col.names=F,row.names=F)
    write.table(res,paste0(outfile,k),append=T,sep="\t",quote=F,col.names=F)

}

if(length(unique(mapping$target))>2){
  groups <- as.list(unique(mapping$target))
  combs <- t(combn(groups,2)) 
  sublist = list()
  for (h in 1:nrow(combs)){
    subgroup1 <- combs[h,][1]
    subgroup2 <- combs[h,][2]
    sub <- mapping[mapping$target==subgroup1 | mapping$target==subgroup2,]  
    sublist[[h]] <- sub  
  } 

  for (i in sublist){
  group1 <- unique(i$target)[1]
  group2 <- unique(i$target)[2]
  k <- paste(group1,group2,sep='_')
  calc_wilcoxon(profile,i,group1,group2,k) 
  }

}else{
  group1 <- unique(mapping$target)[1]
  group2 <- unique(mapping$target)[2]
  k <- paste(group1,group2,sep='_')
  calc_wilcoxon(profile,mapping,group1,group2,k)
}
